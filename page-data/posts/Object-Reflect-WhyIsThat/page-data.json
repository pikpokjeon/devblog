{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Object-Reflect-WhyIsThat","result":{"data":{"markdownRemark":{"id":"ac0b576f-bb14-5c78-9bf9-158033b17e15","html":"<h2 id=\"promise\" style=\"position:relative;\"><a href=\"#promise\" aria-label=\"promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise</h2>\n<ul>\n<li>실행할 비동기 함수들을 배열에 담에 순차적으로 실행하는 것을 공부해 보았습니다.</li>\n</ul>\n<h4 id=\"첫번째\" style=\"position:relative;\"><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8\" aria-label=\"첫번째 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫번째</h4>\n<ol>\n<li>비동기처럼 작동하는 테스트 함수. 프로미스객체로 만든다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> size <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">genSize</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// const store = savedChartData(props, Subscribe)</span>\n    <span class=\"token comment\">// let last = store.get('lastIdx')</span>\n    <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> size<span class=\"token punctuation\">.</span><span class=\"token function\">idx</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n    \n    <span class=\"token comment\">// Reflect.set(chartStore, 'lastIdx', size.idx(e.clientX))</span>\n    <span class=\"token comment\">// console.log(chartStore, '8888')</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>chartStore<span class=\"token punctuation\">[</span><span class=\"token string\">'arr'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> arr<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> idx <span class=\"token operator\">:</span> idx<span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>first<span class=\"token operator\">:</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">:</span><span class=\"token number\">2000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>count<span class=\"token operator\">:</span><span class=\"token number\">1000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> sd<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">234</span><span class=\"token punctuation\">,</span><span class=\"token number\">234</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> idx <span class=\"token operator\">:</span> idx<span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>first<span class=\"token operator\">:</span><span class=\"token number\">2222000</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">:</span><span class=\"token number\">2222000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>count<span class=\"token operator\">:</span><span class=\"token number\">2221000</span><span class=\"token punctuation\">,</span>ran<span class=\"token operator\">:</span><span class=\"token number\">9999</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//    chartStore.arr.push(idx), chartStore.arr.push(chartStore.first%=10)</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">34234</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//     console.log(chartStore, '8888')</span>\n<span class=\"token comment\">//     console.log(_.chartStore, '8888')</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//     console.log(Reflect.getOwnPropertyDescriptor(chartStore, 'id'))</span>\n<span class=\"token comment\">//     chartStore = {</span>\n<span class=\"token comment\">//         id: { first: 300000 }, ...chartStore</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     chartStore.id.first -= 100</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">,</span> <span class=\"token string\">'8888'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token string\">'8888'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Reflect.set(store, lastIdx, '8888')</span>\n    <span class=\"token comment\">// store['lastIdx'] = '8888'</span>\n\n    <span class=\"token comment\">// console.log(last,chartStore)</span>\n    <span class=\"token comment\">// savedChartData(props, Subscribe).set('lastIdx').data(idx)</span>\n    <span class=\"token comment\">// savedChartData(props, Subscribe).set('lalalal').data(idx+10)</span>\n    <span class=\"token comment\">// last = store.get('lastIdx')</span>\n    <span class=\"token comment\">// console.log(last)</span>\n    <span class=\"token comment\">// console.log(store,chartStore)</span>\n<span class=\"token comment\">//     // let last = store.get('lastIdx')</span>\n    <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> size<span class=\"token punctuation\">.</span><span class=\"token function\">idx</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n    \n    <span class=\"token comment\">// Reflect.set(chartStore, 'lastIdx', size.idx(e.clientX))</span>\n    <span class=\"token comment\">// console.log(chartStore, '8888')</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>chartStore<span class=\"token punctuation\">[</span><span class=\"token string\">'arr'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> arr<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> idx <span class=\"token operator\">:</span> idx<span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>first<span class=\"token operator\">:</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">:</span><span class=\"token number\">2000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>count<span class=\"token operator\">:</span><span class=\"token number\">1000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Publish(chartStore, { sd: [34,234,234,], idx : idx, id: {first:2222000, last:2222000},count:2221000,ran:9999 })</span>\n<span class=\"token comment\">//    chartStore.arr.push(idx), chartStore.arr.push(chartStore.first%=10)</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token comment\">//객체가 아니라 적용안됨.</span>\n    <span class=\"token comment\">// const a = Reflect.defineProperty(chartStore, 'id', { value: 2 })  //초기화</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>chartStore<span class=\"token punctuation\">[</span><span class=\"token string\">'idd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">,</span> <span class=\"token string\">'idd'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n    <span class=\"token comment\">// console.log(a,b)</span>\n<span class=\"token comment\">//     console.log(chartStore, '8888')</span>\n<span class=\"token comment\">//     console.log(_.chartStore, '8888')</span>\n    <span class=\"token comment\">// console.log(Reflect.ownKeys(chartStore))</span>\n    <span class=\"token comment\">// console.log(Object.keys(chartStore))</span>\n<span class=\"token comment\">//     console.log(Reflect.getOwnPropertyDescriptor(chartStore, 'id'))</span>\n<span class=\"token comment\">//     chartStore = {</span>\n<span class=\"token comment\">//         id: { first: 300000 }, ...chartStore</span>\n<span class=\"token comment\">//     }</span>\n    <span class=\"token comment\">// chartStore.id -= 100</span>\n    chartStore<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>first <span class=\"token operator\">-=</span> <span class=\"token number\">100</span>\n    chartStore<span class=\"token punctuation\">.</span>idd <span class=\"token operator\">+=</span> <span class=\"token number\">100</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">,</span> <span class=\"token string\">'8888'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chartStore<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token string\">'8888'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>log함수는 프로미스를 반환하는 함수실행 직후 바로 동작하지 않고,\n배열의 모든 함수가 종료되어야 작동한다.</p>\n<p>동기적으로 처리할 함수가 종료되는 즉시 파라메터를 받아와\n바로 실행하기 위해서 아래처럼 코드를 짜보았다.</p>\n<h4 id=\"두번째\" style=\"position:relative;\"><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8\" aria-label=\"두번째 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두번째</h4>\n<ol start=\"2\">\n<li>함수가 종료된 직후 반환값을 이용하여 즉시 다른 함수를 호출하기</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 비동기처럼 작동하는 함수를 만들어준다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">promiseFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> \n<span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Started </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. Will finish after </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>delay<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">ms</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 해당 함수의 프로미스 반환 값을 사용할 다른 함수를 짜본다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getResolve</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Finished </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 함수를 호출할 배열을 만들어준다.</p>\n<p>then을 사용하므로써, 함수 실행후 반환값을 다른 함수에 사용하기위해\n배열 내부에서 메서드 체이닝으로 함수를 호출</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">promiseArry</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">delay</span> <span class=\"token operator\">=></span> \n<span class=\"token punctuation\">[</span> <span class=\"token comment\">//배열이자 함수 그자체.</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>getResolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">//5초 </span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> delay <span class=\"token operator\">-</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>getResolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//3초 </span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> delay <span class=\"token operator\">-</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>getResolve<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//1초 </span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">promiseArry</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>setTimeout을 사용하여 동기 처리를 하기 위해서, 비동기 로직을 동기로\n실행하기 위한 공부를 해보았다.</p>\n<p>다음번엔 제너레이터를 활용하여 공부해야겠다.</p>","fields":{"slug":"/posts/Object-Reflect-WhyIsThat","tagSlugs":["/tag/javascript/","/tag/자바스크립트/"]},"frontmatter":{"date":"2021-04-24T22:40:32.169Z","description":"Object와 유사한 Es6의 Reflect객체의 특성과 간단한 테스트들","tags":["Javascript","자바스크립트"],"title":"Object와 Reflect를 사용하며 생긴 의구점들","socialImage":null}}},"pageContext":{"slug":"/posts/Object-Reflect-WhyIsThat"}},"staticQueryHashes":["1140640941","251939775","401334301"]}
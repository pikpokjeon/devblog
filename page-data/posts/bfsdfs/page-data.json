{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/bfsdfs","result":{"data":{"markdownRemark":{"id":"0c5935f7-16fc-5b73-a9e3-586a619b9b4e","html":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n<span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline\n\n<span class=\"token comment\"># 깊이 우선탐색</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    visit<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> G<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visit<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            dfs<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n        \n            \n<span class=\"token comment\"># 너비 우선탐색</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 양방향 큐인 덱을 생성해서 첫째 노드를 추가</span>\n    q<span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 첫째 노드 방문</span>\n    visit<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\"># 시작노드 처음 출력</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 댁에 요소가 있는경우</span>\n    <span class=\"token keyword\">while</span> q<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 앞에서 빠진 원소가 현재 위치</span>\n        here <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 현재 노드 번째 배열에서</span>\n        <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> G<span class=\"token punctuation\">[</span>here<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 현재노드에 있는 원소번째들이 방문을 하지 않은 경우</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visit<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 방문으로 표시</span>\n                visit<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n                <span class=\"token comment\"># 댁에 추가</span>\n                q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 정점갯수, 간선개수, 탐색시작 정점 번호</span>\nv<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\"># range 에 +1 을 하는 이유?? </span>\n<span class=\"token comment\"># 정점의 개수만큼 2차원배열 원소를 만들어준다</span>\nG <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>        \n<span class=\"token comment\"># 간선의 갯수만큼 인풋을 받는다</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                  \n    <span class=\"token comment\"># 노드 2개</span>\n    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 양방향이라 둘을 이여준다 1 2 의 경우 1배열에 2를, 2배열에 1을</span>\n    G<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n    G<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 정점의 개수만큼 배열 원소를 가진 2차원 배열내부 원소배열들을 오름차순으로</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> G<span class=\"token punctuation\">:</span> \n    i<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 정점의 개수만큼 방문배열 원소를 만들어준다</span>\nvisit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 탐색시작 번호를 파라메터로</span>\ndfs<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>\nvisit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nbfs<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></code></pre></div>\n<p>https://www.acmicpc.net/problem/1094</p>\n<figure>\n\t<blockquote>\n\t\t<p>기본적인 형식은 암기하자. 응용 연습을 통해 마무리!</p>\n\t\t<footer>\n\t\t\t<cite>—처음 배울 때 힘들었습니다</cite>\n\t\t</footer>\n\t</blockquote>\n</figure>","fields":{"slug":"/posts/bfsdfs","tagSlugs":["/tag/algorithm/","/tag/python/"]},"frontmatter":{"date":"2021-01-10T22:12:03.284Z","description":"BFS DFS 기본 코드","tags":["Algorithm","Python"],"title":"[Python] BFS DFS snippet","socialImage":null}}},"pageContext":{"slug":"/posts/bfsdfs"}},"staticQueryHashes":["1140640941","251939775","401334301"]}